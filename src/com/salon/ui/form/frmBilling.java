/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmBilling.java
 *
 * Created on 04-Feb-2009, 22:40:07
 */

package com.salon.ui.form;

import com.salon.launcher.Main;
import com.salon.setting.Setting;
import com.salon.ui.panel.panelTransferGaji;
import java.awt.Cursor;
import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author SAK
 */
public class frmBilling extends javax.swing.JFrame {


    /** Creates new form frmBilling */
    public frmBilling() {
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent e) {
                setExtendedState(MAXIMIZED_BOTH);
            }
        });
        initComponents();
        initData();
        setFocusCycleRoot(true);
    }

    Statement stmGetData;
    ResultSet rsGetData;
    Statement stmVACUUM;
    private frmBarang barang;
    private frmKaryawan karyawan;
    private frmMember member;
    private frmSupplier supplier;
    private frmJenisPerawatan jenisPerawatan;
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        btnDataKaryawan = new javax.swing.JButton();
        btnDataSupplier = new javax.swing.JButton();
        btnDataBarang = new javax.swing.JButton();
        btnOrderBarang = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnJenisPerawatan = new javax.swing.JButton();
        btnLaporanTransaksi = new javax.swing.JButton();
        btnLaporanMutasi = new javax.swing.JButton();
        btnPendapatan = new javax.swing.JButton();
        btnDataMember = new javax.swing.JButton();
        ScrollPane = new javax.swing.JScrollPane();
        MDIPane = new javax.swing.JDesktopPane();
        Menu = new javax.swing.JMenuBar();
        mnFile = new javax.swing.JMenu();
        mnCreateUser = new javax.swing.JMenuItem();
        mnGantiPassword = new javax.swing.JMenuItem();
        mnSettings = new javax.swing.JMenuItem();
        mnVACUUM = new javax.swing.JMenuItem();
        mnTransaksi = new javax.swing.JMenu();
        mnPengeluaranOperasional = new javax.swing.JMenuItem();
        mnSetoranKas = new javax.swing.JMenuItem();
        mnValidasi = new javax.swing.JMenu();
        mnValidasiPerawatan = new javax.swing.JMenuItem();
        mnTransferBonus = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        mnValidasiOrder = new javax.swing.JMenuItem();
        mnKoreksiData = new javax.swing.JMenu();
        mnKoreksiPerawatan = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Salon Billing System");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        btnDataKaryawan.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDataKaryawan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/salon/images/38.png"))); // NOI18N
        btnDataKaryawan.setText("Data Karyawan");
        btnDataKaryawan.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnDataKaryawan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataKaryawanActionPerformed(evt);
            }
        });

        btnDataSupplier.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDataSupplier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/salon/images/8.png"))); // NOI18N
        btnDataSupplier.setText("Data Supplier");
        btnDataSupplier.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnDataSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataSupplierActionPerformed(evt);
            }
        });

        btnDataBarang.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDataBarang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/salon/images/70.png"))); // NOI18N
        btnDataBarang.setText("Data Barang");
        btnDataBarang.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnDataBarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataBarangActionPerformed(evt);
            }
        });

        btnOrderBarang.setText("Modul Order Barang");
        btnOrderBarang.setEnabled(false);
        btnOrderBarang.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnOrderBarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderBarangActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/salon/images/62.png"))); // NOI18N
        jButton1.setText("Modul Transaksi Perawatan / Penjualan Snak");
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnJenisPerawatan.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnJenisPerawatan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/salon/images/27.png"))); // NOI18N
        btnJenisPerawatan.setText("Daftar Jenis Perawatan");
        btnJenisPerawatan.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnJenisPerawatan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJenisPerawatanActionPerformed(evt);
            }
        });

        btnLaporanTransaksi.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnLaporanTransaksi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/salon/images/53.png"))); // NOI18N
        btnLaporanTransaksi.setText("Preview Laporan (Transaksi / Buku Tamu)");
        btnLaporanTransaksi.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnLaporanTransaksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaporanTransaksiActionPerformed(evt);
            }
        });

        btnLaporanMutasi.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnLaporanMutasi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/salon/images/54.png"))); // NOI18N
        btnLaporanMutasi.setText("Preview Laporan (Mutasi Keuangan)");
        btnLaporanMutasi.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnLaporanMutasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaporanMutasiActionPerformed(evt);
            }
        });

        btnPendapatan.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnPendapatan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/salon/images/coins.png"))); // NOI18N
        btnPendapatan.setText("Preview Pendapatan");
        btnPendapatan.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnPendapatan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPendapatanActionPerformed(evt);
            }
        });

        btnDataMember.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDataMember.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/salon/images/58.png"))); // NOI18N
        btnDataMember.setText("Data Member");
        btnDataMember.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnDataMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataMemberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPendapatan, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnLaporanMutasi, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                        .addComponent(btnLaporanTransaksi, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                        .addComponent(btnOrderBarang, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 249, Short.MAX_VALUE))
                    .addComponent(btnJenisPerawatan, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(btnDataBarang, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(btnDataSupplier, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(btnDataMember, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(btnDataKaryawan, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
                .addGap(13, 13, 13))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOrderBarang, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(btnDataBarang, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDataSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDataMember, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDataKaryawan, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btnJenisPerawatan, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLaporanTransaksi, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLaporanMutasi, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPendapatan, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(234, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        ScrollPane.setAutoscrolls(true);

        MDIPane.setAutoscrolls(true);
        ScrollPane.setViewportView(MDIPane);

        jSplitPane1.setRightComponent(ScrollPane);

        Menu.setBackground(new java.awt.Color(204, 204, 204));
        Menu.setForeground(new java.awt.Color(255, 255, 255));

        mnFile.setBackground(new java.awt.Color(204, 204, 204));
        mnFile.setText("File");

        mnCreateUser.setText("Buat User Baru");
        mnCreateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnCreateUserActionPerformed(evt);
            }
        });
        mnFile.add(mnCreateUser);

        mnGantiPassword.setText("Ganti Password User");
        mnGantiPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnGantiPasswordActionPerformed(evt);
            }
        });
        mnFile.add(mnGantiPassword);

        mnSettings.setText("Settings");
        mnSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSettingsActionPerformed(evt);
            }
        });
        mnFile.add(mnSettings);

        mnVACUUM.setText("VACUUM");
        mnVACUUM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnVACUUMActionPerformed(evt);
            }
        });
        mnFile.add(mnVACUUM);

        Menu.add(mnFile);

        mnTransaksi.setBackground(new java.awt.Color(204, 204, 204));
        mnTransaksi.setText("Transaksi Keuangan");
        mnTransaksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnTransaksiActionPerformed(evt);
            }
        });

        mnPengeluaranOperasional.setText("Kas Keluar");
        mnPengeluaranOperasional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnPengeluaranOperasionalActionPerformed(evt);
            }
        });
        mnTransaksi.add(mnPengeluaranOperasional);

        mnSetoranKas.setText("Kas Masuk");
        mnSetoranKas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSetoranKasActionPerformed(evt);
            }
        });
        mnTransaksi.add(mnSetoranKas);

        Menu.add(mnTransaksi);

        mnValidasi.setBackground(new java.awt.Color(204, 204, 204));
        mnValidasi.setText("Validasi Data Transaksi");

        mnValidasiPerawatan.setText("Validasi Transaksi Perawatan");
        mnValidasiPerawatan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnValidasiPerawatanActionPerformed(evt);
            }
        });
        mnValidasi.add(mnValidasiPerawatan);

        mnTransferBonus.setText("Transfer Bonus Stylish");
        mnTransferBonus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnTransferBonusActionPerformed(evt);
            }
        });
        mnValidasi.add(mnTransferBonus);

        jMenuItem1.setText("Transfer Gaji Karyawan");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        mnValidasi.add(jMenuItem1);

        mnValidasiOrder.setText("Validasi Data Order Barang");
        mnValidasiOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnValidasiOrderActionPerformed(evt);
            }
        });
        mnValidasi.add(mnValidasiOrder);

        Menu.add(mnValidasi);

        mnKoreksiData.setBackground(new java.awt.Color(204, 204, 204));
        mnKoreksiData.setText("Koreksi Data");

        mnKoreksiPerawatan.setText("Koreksi Data Transaksi Perawatan");
        mnKoreksiPerawatan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnKoreksiPerawatanActionPerformed(evt);
            }
        });
        mnKoreksiData.add(mnKoreksiPerawatan);

        Menu.add(mnKoreksiData);

        setJMenuBar(Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1049, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    

    private void mnTransaksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnTransaksiActionPerformed
        LoginForm login = new LoginForm(this, true);
        login.show();
}//GEN-LAST:event_mnTransaksiActionPerformed

    private void mnPengeluaranOperasionalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnPengeluaranOperasionalActionPerformed
        LoginForm verifikasiUser = new LoginForm(this, true){

            @Override
            public Boolean Login() {
                Boolean result=Main.data.verifikasiUser(txtUserName.getText(), txtPassword.getText());
                if (result.equals(true)) {
                    TransaksiTunai operasional = new TransaksiTunai(new Frame(), true, "KELUAR") {
                        @Override
                        void initData () throws SQLException {
                            try {
                                stmTransaksi = Main.data.getActiveConnection().prepareStatement("SELECT PENGELUARAN_OPERASIONAL(?,?)");
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(rootPane, ex, "error : initData()", JOptionPane.ERROR_MESSAGE);
                            }
                        }

                        @Override
                        void ExecutePreparedStatement () throws SQLException {
                            stmTransaksi.setObject(1, txtJumlah.getValue());
                            stmTransaksi.setObject(2, txtKeterangan.getText());
                            stmTransaksi.execute();
                        }

                        
                    };
                    operasional.setTitle("Biaya Operasional");
                    operasional.txtIdKaryawan.setVisible(false);
                    operasional.txtNamaKaryawan.setVisible(false);
                    operasional.txtNamPendek.setVisible(false);

                    operasional.lblId.setVisible(false);
                    operasional.lblNama.setVisible(false);
                    operasional.lblNaPen.setVisible(false);
                    
                    dispose();
                    operasional.show();                    
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Gagal memverifikasi user, silahkan mecoba lagi", "user validation failed", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                return true;
            }

            @Override
            public void Batal() {
                super.Batal();
                dispose();
            }
        };
        verifikasiUser.setTitle("Verifikasi User");

        verifikasiUser.txtUserName.setText(Main.data.getUserName());
        verifikasiUser.txtUserName.setEnabled(false);
        verifikasiUser.show();


}//GEN-LAST:event_mnPengeluaranOperasionalActionPerformed

    private void mnSetoranKasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSetoranKasActionPerformed
        LoginForm verifikasiUser = new LoginForm(this, true){
            @Override
            public Boolean Login() {
                Boolean result=Main.data.verifikasiUser(txtUserName.getText(), txtPassword.getText());
                if (result.equals(true)) {
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Gagal memverifikasi user, silahkan mecoba lagi", "user validation failed", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                return true;
            }

            @Override
            public void Batal() {
                super.Batal();
                dispose();
            }
        };

        verifikasiUser.setTitle("Verifikasi User");

        verifikasiUser.txtUserName.setText(Main.data.getUserName());
        verifikasiUser.txtUserName.setEnabled(false);
        verifikasiUser.show();
        
        if (verifikasiUser.Login().equals(false)) {
            return;
        }
        
        TransaksiTunai setorkas = new TransaksiTunai(this, true, "MASUK") {
            @Override
            void initData () throws SQLException {
                try {
                    stmTransaksi = Main.data.getActiveConnection().prepareStatement("SELECT SETORAN_KAS(?,?)");
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex, "error : initData()", JOptionPane.ERROR_MESSAGE);
                }
            }

            @Override
            void ExecutePreparedStatement () throws SQLException {
                stmTransaksi.setObject(1, txtJumlah.getValue());
                stmTransaksi.setObject(2, txtKeterangan.getText());
                stmTransaksi.execute();
            }
        };
        setorkas.setTitle("Setoran Kas");
        setorkas.txtIdKaryawan.setVisible(false);
        setorkas.txtNamaKaryawan.setVisible(false);
        setorkas.txtNamPendek.setVisible(false);

        setorkas.lblId.setVisible(false);
        setorkas.lblNama.setVisible(false);
        setorkas.lblNaPen.setVisible(false);
        setorkas.show();
}//GEN-LAST:event_mnSetoranKasActionPerformed

    private void mnValidasiOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnValidasiOrderActionPerformed
        LoginForm verifikasiUser = new LoginForm(this, true){

            @Override
            public Boolean Login() {

                Boolean result=Main.data.verifikasiUser(txtUserName.getText(), txtPassword.getText());
                if (result.equals(true)) {
                    try {
                        validasiOrder();
                        Main.data.commit();
                        JOptionPane.showMessageDialog(this, "Selesai memvalidasi Order", "Validation success", JOptionPane.INFORMATION_MESSAGE);
                        dispose();
                    } catch (SQLException ex) {
                        Logger.getLogger(frmBilling.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, ex, "error ValidasiOrder", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal memverifikasi user, silahkan mecoba lagi", "user validation failed", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                return true;
            }

            @Override
            public void Batal() {
                super.Batal();
                dispose();
            }
        };
        verifikasiUser.setTitle("Verifikasi User");
        verifikasiUser.txtUserName.setText(Main.data.getUserName());
        verifikasiUser.txtUserName.setEnabled(false);
        verifikasiUser.show();
}//GEN-LAST:event_mnValidasiOrderActionPerformed

    private void mnValidasiPerawatanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnValidasiPerawatanActionPerformed

        LoginForm verifikasiUser = new LoginForm(this, true){

            @Override
            public Boolean Login() {
                Boolean result=Main.data.verifikasiUser(txtUserName.getText(), txtPassword.getText());
                if (result.equals(true)) {
                    try {
                        validasiPerawatan();
                        JOptionPane.showMessageDialog(this, "Selesai memvalidasi Perawatan", "Validation success", JOptionPane.INFORMATION_MESSAGE);
                        dispose();
                    } catch (SQLException ex) {
                        Logger.getLogger(frmBilling.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, ex, "error ValidasiPerawatan", JOptionPane.ERROR_MESSAGE);
                    }

                } else {                    
                    JOptionPane.showMessageDialog(this, "Gagal memverifikasi user, silahkan mecoba lagi", "user validation failed", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                return true;
            }

            @Override
            public void Batal() {
                super.Batal();
                dispose();
            }
        };
        verifikasiUser.setTitle("Verifikasi User");
        verifikasiUser.txtUserName.setText(Main.data.getUserName());
        verifikasiUser.txtUserName.setEnabled(false);
        verifikasiUser.show();

}//GEN-LAST:event_mnValidasiPerawatanActionPerformed
    
    private void mnGantiPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnGantiPasswordActionPerformed
        ChangePassword cp = new ChangePassword(this, true) {

            @Override
            public void ChangePassword() {
                super.ChangePassword();
                if (Main.data.verifikasiUser(Main.data.getUserName(), txtPassLama.getText())) {
                    try {
                        if (ChangePassword(txtPassBaru.getText(), txtKonfirmPass.getText()).equals(false)) {
                            JOptionPane.showMessageDialog(this, "Gagal mengganti password", "error", JOptionPane.ERROR_MESSAGE);
                        }else {
                            JOptionPane.showMessageDialog(this, "Password telah diganti", "Change password success", JOptionPane.INFORMATION_MESSAGE);
                            dispose();
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(frmBilling.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, ex, "error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Password Lama tidak sesuai!", "error", JOptionPane.ERROR_MESSAGE);
                }
            }

        };
        cp.show();
    }//GEN-LAST:event_mnGantiPasswordActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

    }//GEN-LAST:event_formWindowClosing
    

    private void mnCreateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnCreateUserActionPerformed
        CreateUser user = new CreateUser(this, true);
        user.show();
    }//GEN-LAST:event_mnCreateUserActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        JOptionPane.showMessageDialog(this, "Saya menekan Tombol : " + evt.getKeyChar());
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        JOptionPane.showMessageDialog(this, "Saya menekan Tombol : " + evt.getKeyChar());
    }//GEN-LAST:event_formKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        frmTransaksiPerawatan perawatan = new frmTransaksiPerawatan();
        perawatan.show();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnOrderBarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderBarangActionPerformed
        frmOrderBarang order = new frmOrderBarang();
        order.show();
    }//GEN-LAST:event_btnOrderBarangActionPerformed

    private void btnDataBarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataBarangActionPerformed
        disposeAnyForm();
        barang = new frmBarang();
        MDIPane.add(barang);
        barang.setVisible(true);
    }//GEN-LAST:event_btnDataBarangActionPerformed

    private void btnDataSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataSupplierActionPerformed
        disposeAnyForm();
        supplier = new frmSupplier();
        MDIPane.add(supplier);
        supplier.setVisible(true);
    }//GEN-LAST:event_btnDataSupplierActionPerformed

    private void btnDataKaryawanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataKaryawanActionPerformed
        disposeAnyForm();
        karyawan = new frmKaryawan();
        MDIPane.add(karyawan);
        karyawan.setVisible(true);
        
    }//GEN-LAST:event_btnDataKaryawanActionPerformed

    private void btnJenisPerawatanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJenisPerawatanActionPerformed
        disposeAnyForm();
        jenisPerawatan = new frmJenisPerawatan();
        MDIPane.add(jenisPerawatan);
        jenisPerawatan.setVisible(true);
    }//GEN-LAST:event_btnJenisPerawatanActionPerformed

    private void btnLaporanTransaksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaporanTransaksiActionPerformed
        PreviewLaporan_1 laporan = new PreviewLaporan_1(this, false);
        laporan.setLocationRelativeTo(null);
        laporan.show();
    }//GEN-LAST:event_btnLaporanTransaksiActionPerformed

    private void btnLaporanMutasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaporanMutasiActionPerformed
        PreviewLaporan laporan = new PreviewLaporan(this, false);
        laporan.chkPerusahaan.setSelected(false);
        laporan.chkPerusahaan.setEnabled(false);
        laporan.txtNamaKaryawan.setEnabled(false);
        laporan.btnBrowseKaryawan.setEnabled(false);
        laporan.btnPreviewMutasiDaftarKaryawan.setEnabled(false);


        laporan.show();
    }//GEN-LAST:event_btnLaporanMutasiActionPerformed

    private void btnPendapatanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPendapatanActionPerformed
        LoginForm verifikasiUser = new LoginForm(this, true){

            @Override
            public Boolean Login() {
                Boolean result=Main.data.verifikasiUser(txtUserName.getText(), txtPassword.getText());
                if (result.equals(true)) {
                    frmPendapatan pendapatan = new frmPendapatan(null, true);                    
                    dispose();
                    pendapatan.show();
                } else {      
                    JOptionPane.showMessageDialog(this, "Gagal memverifikasi user, silahkan mecoba lagi", "user validation failed", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                return true;
            }

            @Override
            public void Batal() {
                super.Batal();
                dispose();
            }
        };
        verifikasiUser.setTitle("Verifikasi User");
        verifikasiUser.txtUserName.setText(Main.data.getUserName());
        verifikasiUser.txtUserName.setEnabled(false);
        verifikasiUser.show();
    }//GEN-LAST:event_btnPendapatanActionPerformed

    private void mnTransferBonusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnTransferBonusActionPerformed
        LoginForm verifikasiUser = new LoginForm(this, true){

            @Override
            public Boolean Login() {
                Boolean result=Main.data.verifikasiUser(txtUserName.getText(), txtPassword.getText());
                if (result.equals(true)) {
                    try {
                        validasiDetailTransaksi();
                        JOptionPane.showMessageDialog(this, "Selesai mentransfer Bonus Karyawan", "Validation success", JOptionPane.INFORMATION_MESSAGE);
                        dispose();
                    } catch (SQLException ex) {
                        Logger.getLogger(frmBilling.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, ex, "error ValidasiPerawatan", JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Gagal memverifikasi user, silahkan mecoba lagi", "user validation failed", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                return true;
            }

            @Override
            public void Batal() {
                super.Batal();
                dispose();
            }
        };
        verifikasiUser.setTitle("Verifikasi User");
        verifikasiUser.txtUserName.setText(Main.data.getUserName());
        verifikasiUser.txtUserName.setEnabled(false);
        verifikasiUser.show();
    }//GEN-LAST:event_mnTransferBonusActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        final myDialog d = new myDialog(this, true);
        d.setContentPane(new panelTransferGaji() {

            @Override
            public void Batal() {
                super.Batal();
                d.dispose();
            }
        });
        d.pack();
        d.show();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void mnKoreksiPerawatanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnKoreksiPerawatanActionPerformed
        frmEntriTransaksi entri = new frmEntriTransaksi(this, true);
        entri.setTitle("KOREKSI DATA TRANSAKSI PERAWATAN");
        entri.txtNoAntrian.setEditable(false);
        entri.txtIdTransaksi.requestFocus();
        entri.show();
    }//GEN-LAST:event_mnKoreksiPerawatanActionPerformed

    private void btnDataMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataMemberActionPerformed
        disposeAnyForm();
        member = new frmMember();
        MDIPane.add(member);
        member.setVisible(true);
    }//GEN-LAST:event_btnDataMemberActionPerformed

    private void mnSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSettingsActionPerformed
        frmSetting set = new frmSetting(this, true);
        set.show();
    }//GEN-LAST:event_mnSettingsActionPerformed

    private void mnVACUUMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnVACUUMActionPerformed
        
        try {
            JOptionPane.showMessageDialog(rootPane, "Memulai Vacuum Database ?");
            
            stmVACUUM.execute("VACUUM ANALYZE");
            
            JOptionPane.showMessageDialog(rootPane, "Vacuum database selesai");
        } catch (SQLException ex) {
            Logger.getLogger(frmBilling.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_mnVACUUMActionPerformed

    void disposeAnyForm () {
        if (barang instanceof frmBarang) {
            barang.dispose();
        }

        if (supplier instanceof frmSupplier) {
          supplier.dispose();
        }

        if (karyawan instanceof frmKaryawan) {
            karyawan.dispose();
        }

        if (jenisPerawatan instanceof frmJenisPerawatan) {
            jenisPerawatan.dispose();
        }
    }

    void initData () {
        try {
            stmGetData=Main.data.getActiveConnection().createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            stmVACUUM=Main.data.getActiveConnection().createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            
            init_PreparedStatement();
            
            getStatistik();
          } catch (Exception ex) {
            Logger.getLogger(frmBilling.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, ex, "Error : initData", JOptionPane.ERROR_MESSAGE);
        }
    }

    void init_PreparedStatement () throws SQLException {

    }

    
   
    void getStatistik () throws SQLException {
        getStatistikPerawatan();
        getStatistikOrder();
        getStatistikPejualan();
    }
    
    void getStatistikPerawatan () throws SQLException {
        //txtTotalTransaksiPerawatan.setValue(Total_TransaksiPerawatan());
        //txtTotalPerawatan.setValue(Total_Perawatan());
        //txtTotalPendapatanPerawatan.setValue(Total_PendapatanPerawatan());
    }

    void getStatistikOrder () {

    }

    void getStatistikPejualan () {

    }

    /*Object Total_TransaksiPerawatan () throws SQLException {
        rsGetData=stmGetData.executeQuery("SELECT COUNT(IDTRANSAKSI) AS TOTAL FROM " +
                "TRANSAKSIPERAWATAN(" + Setting.CabangID + ") WHERE WAKTU::DATE = NOW()::DATE");
        rsGetData.next();
        return rsGetData.getObject("TOTAL");
    }

    Object Total_Perawatan () throws SQLException {
        rsGetData=stmGetData.executeQuery("SELECT COUNT(IDDETAILTRANSAKSI) AS TOTAL FROM " +
                "DETAILTRANSAKSIPERAWATAN() WHERE IDTRANSAKSI IN " +
                "(SELECT IDTRANSAKSI FROM TRANSAKSIPERAWATAN(" + Setting.CabangID + ") WHERE WAKTU::DATE=NOW()::DATE)");
        rsGetData.next();
        return rsGetData.getObject("TOTAL");
    }

    Object Total_PendapatanPerawatan () throws SQLException {
        rsGetData=stmGetData.executeQuery("SELECT SUM(JUMLAHBAYAR) AS TOTAL FROM " +
                "TRANSAKSIPERAWATAN(" + Setting.CabangID + ") WHERE WAKTU::DATE = NOW()::DATE");
        rsGetData.next();
        return rsGetData.getObject("TOTAL");
    }*/

    

    void validasiPerawatan () throws SQLException {
        stmGetData.execute("SELECT VALIDASIPERAWATAN(" + Setting.CabangID + ")");
    }

    void validasiDetailTransaksi () throws SQLException {
        stmGetData.execute("SELECT VALIDASIDETAILTRANSAKSI(" + Setting.CabangID + ")");
    }

    void validasiOrder () throws SQLException {
        stmGetData.execute("SELECT VALIDASIORDER(" + Setting.CabangID + ")");
    }

    void validasiPenjualan () throws SQLException {
        stmGetData.execute("SELECT VALIDASIPENJUALAN(" + Setting.CabangID + ")");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane MDIPane;
    private javax.swing.JMenuBar Menu;
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JButton btnDataBarang;
    private javax.swing.JButton btnDataKaryawan;
    private javax.swing.JButton btnDataMember;
    private javax.swing.JButton btnDataSupplier;
    private javax.swing.JButton btnJenisPerawatan;
    private javax.swing.JButton btnLaporanMutasi;
    private javax.swing.JButton btnLaporanTransaksi;
    private javax.swing.JButton btnOrderBarang;
    private javax.swing.JButton btnPendapatan;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuItem mnCreateUser;
    private javax.swing.JMenu mnFile;
    private javax.swing.JMenuItem mnGantiPassword;
    private javax.swing.JMenu mnKoreksiData;
    private javax.swing.JMenuItem mnKoreksiPerawatan;
    private javax.swing.JMenuItem mnPengeluaranOperasional;
    private javax.swing.JMenuItem mnSetoranKas;
    private javax.swing.JMenuItem mnSettings;
    private javax.swing.JMenu mnTransaksi;
    private javax.swing.JMenuItem mnTransferBonus;
    private javax.swing.JMenuItem mnVACUUM;
    private javax.swing.JMenu mnValidasi;
    private javax.swing.JMenuItem mnValidasiOrder;
    private javax.swing.JMenuItem mnValidasiPerawatan;
    // End of variables declaration//GEN-END:variables

}
